#include <vector>
void debugging()
{
  const double pi0mass = 0.135;
  TCanvas* pi0PtCanvas = new TCanvas("pi0PtCanvas","pi0PtCanvas",2000,1600);
  pi0PtCanvas->Divide(4,4);
  if(pi0PtCanvas->cd(5))
    {
      cout << "divide happened" << endl;
    }
  pi0PtCanvas->cd(1);
 
  //TCanvas *c1 = new TCanvas("c1","c1", 2000, 400);
  //c1->Divide(2,1);
  //c1->cd(1);

  //decorations and beautifying
  gStyle->SetOptStat(0);
  gStyle->SetTitleX(0.3f);
  gStyle->SetTitleW(0.8f);
  //gStyle->SetTitleAlign(14);

  double pt[16] = {0};
  TH1D* ptHist[16];

  ptHist[0] = new TH1D("pi0Pt1_4To1_6", "pi0Pt1_4To1_6", 800, 0, 0.8);
  ptHist[0] = static_cast<TH1D*>(makePtHist(ptHist[0], 1.4, 1.6, 0));
  pt[0] = (1.4+1.6)/2.0;

  ptHist[1] = new TH1D("pi0Pt1_6To1_8", "pi0Pt1_6To1_8", 800, 0, 0.8);
  ptHist[1] = static_cast<TH1D*>(makePtHist(ptHist[1], 1.6, 1.8, 0));
  pt[1] = (1.6+1.8)/2.0;

  ptHist[2] = new TH1D("pi0Pt1_8To2_0", "pi0Pt1_8To2_0", 800, 0, 0.8);
  ptHist[2] = static_cast<TH1D*>(makePtHist(ptHist[2], 1.8,2.0, 0));
  pt[2] = (1.8+2.0)/2.0;  

  ptHist[3] = new TH1D("pi0Pt2_0To2_2", "pi0Pt2_0To2_2", 800, 0, 0.8);
  ptHist[3] = static_cast<TH1D*>(makePtHist(ptHist[3], 2.0, 2.2, 0));
  pt[3] = (2.0+2.2)/2.0;
  
  ptHist[4] = new TH1D("pi0Pt2_2To2_4", "pi0Pt2_2To2_4", 800, 0, 0.8);
  ptHist[4] = static_cast<TH1D*>(makePtHist(ptHist[4], 2.2, 2.4, 0));
  pt[4] = (2.2+2.4)/2.0;

  ptHist[5] = new TH1D("pi0Pt2_4To2_6", "pi0Pt2_4To2_6", 800, 0, 0.8);
  ptHist[5] = static_cast<TH1D*>(makePtHist(ptHist[5], 2.4, 2.6, 0));
  pt[5] = (2.4+2.6)/2.0;

  ptHist[6] = new TH1D("pi0Pt2_6To2_8", "pi0Pt2_6To2_8", 800, 0, 0.8);
  ptHist[6] = static_cast<TH1D*>(makePtHist(ptHist[6], 2.6, 2.8, 0));
  pt[6] = (2.6+2.8)/2.0;
  
  ptHist[7] = new TH1D("pi0Pt2_8To3_0", "pi0Pt2_8To3_0", 800, 0, 0.8);
  ptHist[7] = static_cast<TH1D*>(makePtHist(ptHist[7], 2.8, 3.0, 0));
  pt[7] = (2.8+3.0)/2.0;

  ptHist[8] = new TH1D("pi0Pt3_0To3_2", "pi0Pt3_0To3_2", 800, 0, 0.8);
  ptHist[8] = static_cast<TH1D*>(makePtHist(ptHist[8], 3.0, 3.2, 0));
  pt[8] = (3.0+3.2)/2.0;

  ptHist[9] = new TH1D("pi0Pt3_2To3_6", "pi0Pt3_2To3_6", 800, 0, 0.8);
  ptHist[9] = static_cast<TH1D*>(makePtHist(ptHist[9], 3.2, 3.6, 2));
  pt[9] = (3.2+3.6)/2.0;

  ptHist[10] = new TH1D("pi0Pt3_6To4_0", "pi0Pt3_6To4_0", 800, 0, 0.8);
  ptHist[10] = static_cast<TH1D*>(makePtHist(ptHist[10], 3.6, 4.0, 2));
  pt[10] = (3.6+4.0)/2.0;

  ptHist[11] = new TH1D("pi0Pt4_0To5_0", "pi0Pt4_0To5_0", 800, 0, 0.8);
  ptHist[11] = static_cast<TH1D*>(makePtHist(ptHist[11],4.0, 5.0, 4));
  pt[11] = (4.0+5.0)/2.0;

  ptHist[12] = new TH1D("pi0Pt5_0To7_0", "pi0Pt5_0To7_0", 800, 0, 0.8);
  ptHist[12] = static_cast<TH1D*>(makePtHist(ptHist[12],5.0, 7.0, 4));
  pt[12] = (5.0+7.0)/2.0;

  ptHist[13] = new TH1D("pi0Pt7_0To10_0", "pi0Pt7_0To15_0", 800, 0, 0.8);
  ptHist[13] = static_cast<TH1D*>(makePtHist(ptHist[13],7.0, 15.0, 5));
  pt[13] = (7.0+15.0)/2.0;
  
  //ptHist[15] = new TH1D("pi0Pt10_0To15_0", "pi0Pt10_0To15_0", 800, 0, 0.8);
  //ptHist[15] = static_cast<TH1D*>(makePtHist(ptHist[15],10.0, 15.0, 5));//*/
  
  double ptLow, ptHigh, yield, meanMass, yMin, sigma;
  int binX = 0;
  TF1 *f1 = new TF1("f1","expo+gaus(2)",0,10);//the fitting function
  f1->SetParameters(1,-0.01,1,0.13,0.01);
  TGraph *pi0Yield = new TGraph();//yield vs pt graph
  TLine *line = new TLine();
    
  for(int i = 0; i < 12; i++)//loops though the histograms to plot them, fit them, get the yield and plot the yield in the grapg
    {
      if(i == 9)//number 9 causes the error so I stopped it here and hard coded it below
	continue;
      //Drawing, and fitting
      pi0PtCanvas->cd(i+1);
      //c1->cd(i+1);
      //cout << __FILE__ << __LINE__ << endl;
      ptHist[i]->Draw("E1");
      //cout << __FILE__ << __LINE__ << endl;
      ptHist[i]->Fit("f1");
      //cout << __FILE__ << __LINE__ << endl;
      
      //Getting the fit parameter values
      meanMass = ptHist[i]->GetFunction("f1")->GetParameter(3);
      yield = ptHist[i]->GetFunction("f1")->GetParameter(2);
      sigma = ptHist[i]->GetFunction("f1")->GetParameter(4);
      //cout << pt[i] <<  "\tyield: " << yield << "\tmass: " << meanMass << "\tbinx: " << binX << endl;

      pi0Yield->SetPoint(i,pt[i],yield);
      ptHist[i]->GetXaxis()->SetRangeUser(0,0.3);

      //getting a line at the pi0 mass on the histogram
      gPad->Update();
      yMin = ptHist[i]->GetYaxis()->GetXmin();
      //cout << "yMin: " << yMin <<  "\tyield: " << yield << endl;
      //line->SetX1(pi0mass);  line->SetY1(yMin);   line->SetX2(pi0mass);   line->SetY2(yield);
      line->SetLineStyle(1);
      line->SetLineColor(3);
      line->SetLineWidth(4);
      line->DrawLine(pi0mass,yMin,pi0mass,yield);
      line->SetLineStyle(2);
      line->SetLineColor(28);
      line->DrawLine(meanMass+sigma,yMin,meanMass+sigma,yield);
      line->DrawLine(meanMass-sigma,yMin,meanMass-sigma,yield);
    }//*/
  
  //hard coded all the histograms with the fits

  /*pi0PtCanvas->cd(1);
  ptHist[0]->Fit("f1");
  ptHist[0]->GetXaxis()->SetRangeUser(0,0.3);
  ptHist[0]->Draw("E1");
  pi0PtCanvas->cd(2);
  ptHist[1]->Fit("f1");
  ptHist[1]->GetXaxis()->SetRangeUser(0,0.3);
  pi0PtCanvas->cd(3);
  ptHist[2]->Fit("f1");
  ptHist[2]->GetXaxis()->SetRangeUser(0,0.3);
  pi0PtCanvas->cd(4);
  ptHist[3]->Fit("f1");
  ptHist[3]->GetXaxis()->SetRangeUser(0,0.3);
  pi0PtCanvas->cd(5);
  ptHist[4]->Fit("f1");
  ptHist[4]->GetXaxis()->SetRangeUser(0,0.3);
  
  pi0PtCanvas->cd(6);
  ptHist[5]->Fit("f1");
  ptHist[5]->GetXaxis()->SetRangeUser(0,0.3);
  pi0PtCanvas->cd(7);
  ptHist[6]->Fit("f1");
  ptHist[6]->GetXaxis()->SetRangeUser(0,0.3);
  pi0PtCanvas->cd(8);
  ptHist[7]->Fit("f1");
  ptHist[7]->GetXaxis()->SetRangeUser(0,0.3);
  pi0PtCanvas->cd(9);
  ptHist[8]->Fit("f1");
  ptHist[8]->GetXaxis()->SetRangeUser(0,0.3);//*/
  pi0PtCanvas->cd(10);
  ptHist[9]->Draw("E1");
  ptHist[9]->Fit("f1");
  meanMass = ptHist[9]->GetFunction("f1")->GetParameter(3);
  //binX = ptHist[9]->GetXaxis()->FindBin(meanMass);
  yield = ptHist[9]->GetFunction("f1")->GetParameter(2);//->GetBinContent(binX);
  //yield = ptHist[9]->GetMaximum();
  cout << pt[9] <<  "\tyield: " << yield << "\tmass: " << meanMass << "\tbinx: " << binX << endl;
  ptHist[9]->GetXaxis()->SetRangeUser(0,0.3);
  gPad->Update();
  yMin = ptHist[9]->GetYaxis()->GetXmin();
  cout << "yMin: " << yMin <<  "\tyield: " << yield << endl;
  //line->SetX1(pi0mass);  line->SetY1(yMin);  line->SetX2(pi0mass);  line->SetY2(yield);
  line->SetLineColor(kGreen);
  line->DrawLine(pi0mass,yMin,pi0mass,yield);
      

  /*pi0PtCanvas->cd(11);
  ptHist[10]->Draw();
  ptHist[10]->Fit("f1");
  ptHist[10]->GetXaxis()->SetRangeUser(0,0.3);
  pi0PtCanvas->cd(12);
  ptHist[11]->Fit("f1");
  ptHist[11]->GetXaxis()->SetRangeUser(0,0.3);//*/
  
  pi0PtCanvas->cd(13);
  ptHist[12]->Draw("E1");
  ptHist[12]->Fit("f1");
  meanMass = ptHist[12]->GetFunction("f1")->GetParameter(3);
  //binX = ptHist[12]->GetXaxis()->FindBin(meanMass);
  yield = ptHist[12]->GetFunction("f1")->GetParameter(2);//->GetBinContent(binX);
  //yield = ptHist[12]->GetMaximum();
  cout << pt[12] <<  "\tyield: " << yield << "\tmass: " << meanMass << "\tbinx: " << binX << endl;
  ptHist[12]->GetXaxis()->SetRangeUser(0,0.3);//
  gPad->Update();
  yMin = ptHist[12]->GetYaxis()->GetXmin();
  cout << "yMin: " << yMin <<  "\tyield: " << yield << endl;
  //line->SetX1(pi0mass);  line->SetY1(yMin);  line->SetX2(pi0mass);  line->SetY2(yield);
  line->SetLineColor(kGreen);
  line->DrawLine(pi0mass,yMin,pi0mass,yield);
  

  pi0PtCanvas->cd(14);
  ptHist[13]->Draw("E1");
  ptHist[13]->Fit("f1");
  meanMass = ptHist[13]->GetFunction("f1")->GetParameter(3);
  //binX = ptHist[13]->GetXaxis()->FindBin(meanMass);
  yield = ptHist[13]->GetFunction("f1")->GetParameter(2);//->GetBinContent(binX);
  //yield = ptHist[13]->GetMaximum();
  //cout << pt[13] <<  "\tyield: " << yield << "\tmass: " << meanMass << "\tbinx: " << binX << endl;


  ptHist[13]->GetXaxis()->SetRangeUser(0,0.3);//
  gPad->Update();
  yMin = ptHist[13]->GetYaxis()->GetXmin();
  cout << "yMin: " << yMin <<  "\tyield: " << yield << endl;
  line->SetX1(pi0mass);  line->SetY1(yMin);  line->SetX2(pi0mass);  line->SetY2(yield);
  line->SetLineColor(kGreen);
  line->DrawLine(pi0mass,yMin,pi0mass,yield);
  
  //pi0PtCanvas->cd(16);
  //ptHist[14]->Fit("f1");
  //ptHist[14]->GetXaxis()->SetRangeUser(0,0.3);
  
  //Makes the information box for the runs
  pi0PtCanvas->cd(16);
  TLegend *leg= new TLegend(0.1,0.1,0.9,0.9);
  leg->SetHeader("ALICE performace");
  leg->AddEntry((TObject*)0,"", "");
  leg->AddEntry((TObject*)0,"pp, #sqrt{s} = 2.76 TeV", "");
  leg->AddEntry((TObject*)0,"#pi^{0} #rightarrow #gamma#gamma", "");
  leg->AddEntry((TObject*)0,"#gamma's rec. with PCM, EMCal", "");
  leg->AddEntry((TObject*)0,"Data: 2.9e+07 events", "");
  leg->AddEntry(ptHist[0], "mixed evt. subtr. M_{#gamma#gamma}", "pe");
  leg->AddEntry(f1,"Fit", "l");
  leg->Draw();

  //Drawing the graph of the various yields with respective to Pt
  TCanvas *pi0Ypt= new TCanvas();
  pi0Yield->SetTitle("#pi^{0} yield vs p_{T} distribution");
  pi0Yield->GetXaxis()->SetTitle("p_{T} (GeV/c)");
  pi0Yield->GetYaxis()->SetTitle("Yield");
  pi0Yield->SetMarkerStyle(33);
  pi0Yield->Draw("AP");
}



/*////////////////////////////////////////////////////////////////////
Opens the files, takes the appropriate Pt slice for the mass based on the ptMin and ptMax. Rebins if specified by comining rebin numbr of bins, and returns the background subtracated invariant mass historgam
////////////////////////////////////////////////////////////////////*/
TH1D* makePtHist(TH1D* inComing, double ptMin, double ptMax, int rebin)
{
  TFile *myFile = TFile::Open("GammaCalo_LHC13g-pass1_60.root");
  TList *myL = (TList*)myFile->Get("GammaCalo;1");
  TList* cut_folder = (TList*)myL->FindObject("Cut Number 00000113_1111121063032220000_0163103100000050");
  TList* esdHists = (TList*)cut_folder->FindObject("00000113_1111121063032220000_0163103100000050 ESD histograms");
  TH2F* hist = (TH2F*)esdHists->FindObject("ESD_Mother_InvMass_Pt");
  hist->GetXaxis()->SetTitle("M_{} (GeV/c^2)");
  hist->GetYaxis()->SetTitle("Pt (GeV/c)");

  //TCanvas* c1 = new TCanvas();
  //hist->Draw("colz");
  int ptBinMin = static_cast<int>(ptMin*10);
  int ptBinMax = static_cast<int>(ptMax*10);

  
  TH1D* pi0 = inComing;
  //gStyle->SetTitleFontSize(0.7);
  pi0->GetXaxis()->SetTitle("M_{#gamma#gamma} (GeV/c^{2})");
  pi0->GetXaxis()->SetTitleSize(0.05);
  //gStyle->SetTitleFontSize(0.5);
  pi0->GetYaxis()->SetTitle("dN_{#gamma#gamma}/dM_{#gamma#gamma}");
  pi0->GetYaxis()->SetTitleSize(0.05);
  pi0->SetMarkerStyle(33);
  
  char buffer[150]; 
  sprintf(buffer, "%.02f < p_{T} < %.02f GeV/c", ptMin, ptMax);
  pi0->SetTitle(buffer);
  //cout << "Title Size for" << buffer << "\t" << pi0->GetTitleSize() << endl;
  //pi0->SetTitleSize(0.3);
  gStyle->SetTitleFontSize(0.055);
  //cout << "Title Size for" << buffer << "\t" << pi0->GetTitleSize() << endl;
  
  TH1D* pi0WBg = hist->ProjectionX("pi0WBg",ptBinMin,ptBinMax,"");
  pi0WBg->GetYaxis()->SetTitle("dN_{#gamma#gamma}/dM_{#gamma#gamma}");
  pi0WBg->GetYaxis()->SetTitleSize(0.05);
  pi0WBg->GetXaxis()->SetTitleSize(0.05);
  pi0WBg->GetXaxis()->SetTitle("M_{#gamma#gamma} (GeV/c^{2})");
  
  if(rebin)
    {
      pi0WBg->Rebin(rebin);
      pi0->Rebin(rebin);
    }
  pi0WBg->SetTitle("#pi^0 peak from invariant mass");
  //TCanvas* c2 = new TCanvas();
  //pi0WBg->GetXaxis()->SetRangeUser(0,0.3);
  //pi0WBg->Draw("E1");

  pi0WBg->Fit("pol1", "Q0");
  double p0 = pi0WBg->GetFunction("pol1")->GetParameter(0);
  double p1 = pi0WBg->GetFunction("pol1")->GetParameter(1);
  //cout << "p0: "<< p0 << "\t" << "p1: " << p1 << endl;

  int binContents[800] = {0};

  int totBins = pi0WBg->GetNbinsX();
  for(int i = 0; i < totBins; i++)
    {
      binContents[i] = pi0WBg->GetBinContent(i+1);
      //if(i%100 == 0)
      //cout << i+1 << "\t" << pi0Wbg->GetBinContent(i+1) << endl;
    }


  //making changes in the new hsitogram
  for(int i = 0; i < totBins; i++)
    {
      double y, x, binVal;
      x = y = binVal = 0;
      x = pi0WBg->GetBinCenter(i+1);
      y = p0 + p1*x;
      binVal = pi0WBg->GetBinContent(i+1);
      if(binVal)
	binVal = pi0WBg->GetBinContent(i+1) - y;;
      pi0->SetBinContent(i+1,binVal);
      //cout << i+1 << "\t" << binContents[i] << "\t" << pi0WBg->GetBinContent(i+1) << "\t" << pi0->GetBinContent(i+1) << endl;
    }
  //TCanvas* c3 = new TCanvas();
  //pi0->Draw();//*/
  return pi0;
}
